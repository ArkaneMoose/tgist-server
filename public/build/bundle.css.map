{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../src/index.html",
    "../../src/transcript.html",
    "../../src/Smilometer.html"
  ],
  "sourcesContent": [
    "<div class=\"container\">\n  <header>\n    T-Gist Live Transcription\n  </header>\n  <Transcript />\n</div>\n\n<style>\n  header {\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    z-index: -1;\n  }\n  .container:before {\n    content: '';\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100vw;\n    height: 100vh;\n    background: linear-gradient(-45deg, #cd0a5e, #e57bfa) no-repeat;\n    background-size: 200vw 160vh;\n    background-position: top left;\n    animation: fluctuate 4s ease-in-out infinite;\n    z-index: -1;\n  }\n  @keyframes fluctuate {\n    0% {\n      background-position: 0 0;\n    }\n    50% {\n      background-position: -100vw -60vh;\n    }\n    100% {\n      background-position: 0 0;\n    }\n  }\n</style>\n\n<script>\n  import Transcript from './transcript.html'\n</script>\n",
    "<main>\n  {#each transcripts as transcript, index}\n  <section class=\"{transcript.collapsed ? 'collapsed' : ''}\">\n    {#if index < transcripts.length - 1}\n    <div class=\"header\">\n      <p>Transcript {index + 1}</p>\n      <button class=\"close\" on:click=\"{() => expandTranscript(index)}\"></button>\n    </div>\n    <button class=\"toggle {transcript.viewAll ? '' : 'selected'}\" on:click=\"{() => toggleTranscriptView(false, index)}\">Highlights</button>\n    <button class=\"toggle {transcript.viewAll ? 'selected' : ''}\" on:click=\"{() => toggleTranscriptView(true, index)}\">View all</button>\n    {/if}\n    {#each transcript.transcriptBlocks as entry}\n    <div class=\"entry-container {!transcript.viewAll && !entry.important ? 'hidden' : ''} {!entry.important ? 'dim' : ''}\">\n      <p class=\"label\">{capitalize(entry.speaker)}</p>\n      <p>\n        <span>{entry.recognized}</span>\n        <span class=\"recognizing\">{entry.recognizing}</span>\n      </p>\n    </div>\n    {/each}\n  </section>\n  {/each}\n  <div class=\"smilometer-container\">\n    <Smilometer sentiment=\"{sentiment}\" />\n  </div>\n</main>\n\n<style>\n  main {\n    display: flex;\n    flex-direction: column;\n    margin-left: 5%;\n    padding-top: 7rem;\n  }\n  .smilometer-container {\n    position: fixed;\n    right: 5%;\n    top: 15rem;\n  }\n  section {\n    border-radius: 1rem;\n    background: white;\n    box-shadow: var(--container-shadow);\n    padding: 2rem;\n    min-height: 100vh;\n    font-family: open-sans;\n    color: var(--grey-1);\n    width: 83%;\n    font-family: open-sans, sans-serif;\n    margin-top: 5rem;\n    transition: min-height 0.5s;\n  }\n  section.collapsed {\n    overflow: hidden;\n    height: 10rem;\n    min-height: 0;\n  }\n  .entry-container {\n    display: flex;\n  }\n  .entry-container.dim {\n    color: var(--grey-5);\n  }\n  .collapsed .entry-container, .entry-container.hidden {\n    display: none;\n  }\n  .label {\n    min-width: 8rem;\n    text-align: right;\n    font-weight: 600;\n    padding-right: 1rem;\n  }\n  p > .recognizing {\n    color: var(--light-magenta);\n  }\n  section .header {\n    display: flex;\n    font-size: 1.5rem;\n    font-weight: 600;\n    color: var(--grey-1);\n  }\n  section button {\n    border: none;\n    background: white;\n    color: var(--grey-1);\n    font-family: open-sans;\n  }\n  section .header > button {\n    background: url('/icons/arrow-down.svg') no-repeat;\n    background-position: center;\n    background-size: 3rem;\n    width: 3rem;\n    margin-left: auto;\n  }\n  .toggle {\n    padding: 0.5rem 1rem;\n    font-size: 1.5rem;\n    box-shadow: 0 0 1rem var(--grey-5);\n    margin-right: 0.5rem;\n    margin-top: 1rem;\n    border-radius: 0.5rem;\n  }\n  .toggle.selected {\n    background: #d8357b;\n    color: white;\n  }\n  .collapsed .toggle {\n    display: none;\n  }\n</style>\n\n<script>\n  import { onMount, beforeUpdate } from 'svelte'\n  import Smilometer from './Smilometer.html'\n  import { processBestSentences, processSentiment } from './analytics';\n\n  let transcripts = [{transcriptBlocks: []}]\n  let sentiment = 50\n\n  const capitalize = word =>\n    word && word.length ? word[0].toUpperCase() + word.slice(1) : ''\n\n  let lastLogs = {}\n\n  const expandTranscript = index => transcripts[index].collapsed = !transcripts[index].collapsed\n\n  const toggleTranscriptView = (viewAll, index) => transcripts[index].viewAll = viewAll\n\n  onMount(() => {\n    const socket = new WebSocket(\n      `${location.protocol === 'https:' ? 'wss:' : 'ws:'}//${location.host}/ws/speech/recv`\n    )\n\n    socket.onmessage = event => {\n      let transcript = transcripts[transcripts.length - 1].transcriptBlocks\n      transcripts[transcripts.length - 1].collapsed = false\n      transcripts[transcripts.length - 1].viewAll = true\n\n      const { speaker, type, result } = JSON.parse(event.data)\n      const lastEntry = transcript.length\n        ? transcript[transcript.length - 1]\n        : {}\n\n      if (lastEntry.speaker === speaker) {\n        lastLogs[speaker] = lastEntry\n      }\n\n      if (type === 'transfer') {\n        if (lastLogs['agent']){\n          lastLogs['agent'].recognizing = ''\n        }\n        if (lastLogs['customer']) {\n          lastLogs['customer'].recognizing = ''\n        }\n        transcripts[transcripts.length - 1].collapsed = true;\n        transcripts[transcripts.length - 1].viewAll = false;\n        transcripts = [...transcripts, {transcriptBlocks: []}]\n        lastLogs = {}\n        return;\n      }\n\n      if (!lastLogs[speaker]) {\n        if (type === 'recognized') {\n          lastLogs[speaker] = {\n            speaker: speaker,\n            recognized: result,\n            recognizing: '',\n            important: true,\n          }\n        } else {\n          lastLogs[speaker] = {\n            speaker: speaker,\n            recognized: '',\n            recognizing: result,\n            important: true,\n          }\n        }\n        transcript.push(lastLogs[speaker])\n      } else {\n        if (type === 'recognized') {\n          lastLogs[speaker].recognized += ' ' + result\n          lastLogs[speaker].recognizing = ''\n        } else {\n          lastLogs[speaker].recognizing = result\n        }\n      }\n\n      if (type === 'recognized') {\n        lastLogs[speaker] = undefined\n        processBestSentences(transcript)\n\n        if (speaker === 'customer') {\n          const customerTranscript\n            = transcript.filter(({ speaker }) => speaker === 'customer');\n          processSentiment(customerTranscript).then(sentimentDecimal =>\n            sentiment = sentimentDecimal * 100\n          )\n        }\n      }\n    }\n  })\n</script>\n",
    "<div class=\"meter\">\n  <div\n    class=\"emoji\"\n    style=\"border: 0.5rem solid {currEmoji.color}; --sentiment: {sentiment}\"\n  >\n    <span>{currEmoji.icon}</span>\n  </div>\n</div>\n\n<style>\n  .meter {\n    position: relative;\n    height: 25rem;\n    width: 8rem;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    background: white;\n    box-shadow: var(--container-shadow);\n    padding: 3rem;\n    border-radius: 1rem;\n  }\n  .meter:before {\n    content: '';\n    position: relative;\n    height: 100%;\n    width: 1.5rem;\n    border-radius: 0.75rem;\n    background: linear-gradient(#41ff50, #fff500, #ff3939);\n  }\n  .emoji {\n    --sentiment: 0;\n    content: '';\n    border-radius: 100%;\n    position: absolute;\n    bottom: calc(2rem + var(--sentiment) / 6 * 1rem);\n    height: 4rem;\n    box-shadow: 0 0 1rem var(--grey-5);\n    transition: all 0.5s;\n    transform: scale(calc(1 + var(--sentiment) / 200));\n  }\n  .emoji > span {\n    vertical-align: middle;\n    line-height: 1;\n    font-size: 3.4rem;\n    margin: -0.2rem;\n  }\n</style>\n\n<script>\n  import { beforeUpdate } from 'svelte'\n\n  const emojis = [\n    {\n      icon: '😠',\n      color: '#FF3939',\n    },\n    {\n      icon: '🙁',\n      color: '#FFA219',\n    },\n    {\n      icon: '😐',\n      color: '#FFF500',\n    },\n    {\n      icon: '🙂',\n      color: '#B3F81F',\n    },\n    {\n      icon: '😃',\n      color: '#41FF50',\n    },\n  ]\n  let currEmoji = emojis[0]\n  export let sentiment = 100\n\n  beforeUpdate(() => {\n    const index = Math.floor(sentiment / 20)\n    currEmoji = emojis[index] ? emojis[index] : emojis[4]\n  })\n</script>\n"
  ],
  "names": [],
  "mappings": "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"
}